---
import Layout from '../layouts/Layout.astro';
// import test_image from "../../public/test_image.jpg";
// import { Image } from 'astro:assets';

enum Page {
    HOME = "Home",
    APOD = "APOD",
    MRP  = "MRP"
}

const API_KEY: string = "DEMO_KEY"
const TODAY_DATE: Date = new Date(Date.now())

function formatDate(date: Date): string {
	return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;
}

interface APODResponse {
    resource?: any;
    concept_tags?: any;

    title: string;
    date: string;
    
    url: string;
    hdurl: string;

    media_type?: string;
    explanation: string;

    concepts?: any; 
    thumbnail_url?: any 

    copyright: string; 
    service_version?: string; 
}

interface APODRequests {
	limit: string | null,
	remaining: string | null
}

let requestState: APODRequests = {
	limit: "-40",
	remaining: "-35"
}

async function fetchFromAPOD(URL: string, is_production: boolean): Promise<APODResponse | null> {
	if(!is_production) return {
		title: "Fullmoon",
		date: `${TODAY_DATE}`,
		copyright: "Not me",
		explanation: "The moon is red :P",
		url: "test_image.jpg",
		hdurl: "test_image.jpg"
	}


	const res_blob = await fetch(URL)

	if(res_blob.ok) {
		const RATE_LIMIT = res_blob.headers.get("x-ratelimit-limit")
		const RATE_LIMIT_REMAINING = res_blob.headers.get("x-ratelimit-remaining")

		requestState.limit = RATE_LIMIT
		requestState.remaining = RATE_LIMIT_REMAINING
 
		console.info(`Requested image from APOD, limit [${RATE_LIMIT_REMAINING}/${RATE_LIMIT}]`)
	}

	const res_json = await res_blob.json()

	if(res_json.error != null) {
		console.error(`Error requesting to APOD API with url "${URL}"\nmessage: `, res_json.error.message)
		// window.alert(`Error requesting to APOD API with url "${URL}"\nmessage: ${res_json.error.message}`)
		return null
	}


	const RESPONSE = res_json
	// console.table(RESPONSE)

	return RESPONSE
}


const URL = `https://api.nasa.gov/planetary/apod?api_key=${API_KEY}&date=${formatDate(TODAY_DATE)}&thumbs=true`
let server_response: APODResponse | null = await fetchFromAPOD(URL, false)
---

<Layout currentPage={Page.APOD}>
	<nav>
		{
			server_response != null &&
				<h2>{server_response?.title ?? "Could not load today image"}</h2>
		}

		<p id="state">{requestState.remaining ?? "?"}/{requestState.limit ?? "?"}</p>
		<input type="date" id="input_date" min="1995-06-16" value={formatDate(TODAY_DATE)} max={formatDate(TODAY_DATE)}>
		<button id="button_load">Load image</button>
		<button id="button_load_random">Load Random image</button>
	</nav>

	<article>
		<!-- {server_response.hdurl} -->
		<img id="image" class="error" src=".jpg" alt={server_response?.title ?? "Couldn't load image"} onerror="this.onerror=null;this.src='imagefound.gif';" onload="">
		{
			server_response != null &&
				<p>Explanation: {server_response!.explanation}</p>
				<p>Copyright: {server_response!.copyright}</p>
		}
	</article>
</Layout>

<style>
	nav {
		margin: .5em 1em;
		height: 2.2em;

		display: flex;
		align-items: stretch;
		justify-content: flex-end;
		flex-wrap: nowrap;
		gap: .5rem;
	}
	
	nav > h2 {
		margin: .3em 1em;

		white-space: nowrap;

		flex-basis: 100%;
	}

	nav > p {
		/* Import style from button */
		padding: 0.3em .5em;

		font-size: var(--text-primary);
		color: var(--fg-text-primary);
		background-color: var(--bg-body-secondary);

		border: .1em solid var(--fg-primary);
		border-radius: 1rem;
	}

	img {
		display: inline-block;
		width: calc(100% - 2em);
		margin: 0 1em;

		border: .1em solid var(--fg-primary);
		border-radius: 1em;

		object-fit: contain;
	}

	img.error {
		padding: 1em;
		background-color: red;
		opacity: 100%;
	}

	img.loading {
		position: relative;

		animation-name: breathe;
		animation-duration: 3s;
		animation-timing-function: cubic-bezier(.4,.85,.63,.14);
		animation-iteration-count: infinite;
		animation-direction: alternate-reverse;
	}

	@keyframes breathe {
		from {
			filter: grayscale(0);
		}

		to {
			filter: grayscale(1);
		}
	}
</style>

<script defer define:vars={{TODAY_DATE, API_KEY, server_response, requestState}}>

const EL_INPUT_DATE = document.getElementById("input_date");
const EL_BUTTON_LOAD = document.getElementById("button_load");
const EL_BUTTON_LOAD_RANDOM = document.getElementById("button_load_random");
const EL_REQUEST_STATE_P = document.getElementById("state");
const EL_IMAGE = document.getElementById("image");

/**
 * @type {APODResponse | null}
 */
let loaded_response = null
updateView(server_response)

/**
 * @param {Date} date 
 * @returns {string}
 */
function formatDate(date) {
	return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;
}

EL_BUTTON_LOAD.onclick = (_) => preventSpam(loadImage())
async function loadImage() {
	const DATE = formatDate(new Date(EL_INPUT_DATE.value))
	const URL = `https://api.nasa.gov/planetary/apod?api_key=${API_KEY}&date=${DATE}&thumbs=true`
	const RESPONSE = await fetchFromAPOD(URL)

	updateView(RESPONSE)
}


EL_BUTTON_LOAD_RANDOM.onclick = (_) => preventSpam(loadRandomImage())
async function loadRandomImage() {
	const URL = `https://api.nasa.gov/planetary/apod?api_key=${API_KEY}&count=1&thumbs=true`
	let RESPONSE = await fetchFromAPOD(URL)

	RESPONSE = RESPONSE == null ? null : RESPONSE[0]
	updateView(RESPONSE)
}

/**
 * @param {APODResponse | null} response 
 */
function updateView(response) {
	console.table(response)
	if(response == null) {
		return
	}

	EL_REQUEST_STATE_P.innerText = `${requestState.remaining}/${requestState.limit}`

	EL_IMAGE.src = response.url
	EL_IMAGE.alt = response.title

	EL_INPUT_DATE.setAttribute("value", response.date)
	loaded_response = response
}

/**
 * 
 * @param {URL} URL 
 * @returns {APODResponse | null}
 */
async function fetchFromAPOD(URL) {
	const res_blob = await fetch(URL)
	if(res_blob.ok) {
		requestState.limit = res_blob.headers.get("x-ratelimit-limit")
		requestState.remaining = res_blob.headers.get("x-ratelimit-remaining")
		
		console.info(`Requested image from APOD, limit [${requestState.remaining}/${requestState.limit}]`)
	}

	const res_json = await res_blob.json()
	if(res_json.error != null) {
		const MSG = `Error requesting to APOD API with url "${URL}"\nmessage: ${res_json.error.message}`
		console.error(MSG)
		window.alert(MSG)
		return null
	}

	return res_json
}

/**
 * 
 * @param {Promise<void>} image_loader 
 */
function preventSpam(image_loader) {
	EL_BUTTON_LOAD_RANDOM.setAttribute("disabled", "")
	EL_BUTTON_LOAD.setAttribute("disabled", "")

	EL_IMAGE.classList.add("loading")
	
	// 	EL_BUTTON_DOWNLOAD.removeAttribute("disabled")
	// 	EL_BUTTON_LOAD_RANDOM.removeAttribute("disabled")
	// 	EL_BUTTON_LOAD.removeAttribute("disabled")
	// }

	image_loader
		.finally(_ => {
			EL_BUTTON_LOAD_RANDOM.removeAttribute("disabled")
			EL_BUTTON_LOAD.removeAttribute("disabled")
		})
}

/**
 * @typedef {Object} APODResponse
 * @prop {any} resource
 * @prop {any} concept_tags
 * 
 * @prop {string?} title
 * @prop {string?} date
 *
 * @prop {string?} url
 * @prop {string?} hdurl
 * 
 * @prop {string?} media_type
 * @prop {string?} explanation
 * 
 * @prop {any} concepts
 * @prop {any} thumbnail_url
 * 
 * @prop {string?} copyright
 * @prop {string?} service_version
 */
</script>